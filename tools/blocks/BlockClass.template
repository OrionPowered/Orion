package pro.prysm.orion.api.data;

import lombok.Getter;
import lombok.ToString;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

@Getter
@ToString
public class Block {

	private static final List<Block> REGISTRY = new ArrayList<>(Arrays.asList(
        // Begin auto generated code
        %list_items%
        // End auto generated code
	));

	// Begin auto generated code
    %statics%
    // End auto generated code

    /**
     * Gets a block by its name
     * @param name Block Name
     * @return Block
     */
    public static Block getBlock(String name) {
        return REGISTRY.stream().filter(block -> block.getName().equalsIgnoreCase(name)).collect(toSingleton());
    }

    /**
     * Gets a block by its ID
     * @param id Block ID
     * @return Block
     */
    public static Block getBlock(int id) {
        return REGISTRY.stream().filter(block -> block.getId() == id).collect(toSingleton());
    }

    /**
     * Gets a Block from the provided state
     * @param state Block State
     * @return Block
     */
    public static Block getBlockFromState(long state) {
        return REGISTRY.stream()
                .filter(block -> block.getDefaultState() == state || (block.getMinStateId() < state && block.getMaxStateId() > state))
                .collect(toSingleton());
    }

    public static <T> Collector<T, ?, T> toSingleton() {
        return Collectors.collectingAndThen(
                Collectors.toList(),
                list -> {
                    if (list.size() == 0) throw new NullPointerException();
                    else if (list.size() > 1) throw new IllegalStateException();
                    else return list.get(0);
                }
        );
    }

    private final int id;
    private final String displayName;
    private final String name;
    private final double hardness;
    private final double resistance;
    private final long minStateId;
    private final long maxStateId;
    private final long defaultState;
    // TODO: States Array
    private final boolean diggable;
    private final int emitLight;
    private final String material;
    private final int[] harvestTools;


    private Block(
            int id,
            String displayName,
            String name,
            double hardness,
            double resistance,
            long minStateId,
            long maxStateId,
            long defaultState,
            boolean diggable,
            int emitLight,
            String material,
            int[] harvestTools
    ) {
        this.id = id;
        this.displayName = displayName;
        this.name = name;
        this.hardness = hardness;
        this.resistance = resistance;
        this.minStateId = minStateId;
        this.maxStateId = maxStateId;
        this.defaultState = defaultState;
        this.diggable = diggable;
        this.emitLight = emitLight;
        this.material = material;
        this.harvestTools = harvestTools;
    }

    private Block(
            int id,
            String displayName,
            String name,
            double hardness,
            double resistance,
            long minStateId,
            long maxStateId,
            long defaultState,
            boolean diggable,
            int emitLight,
            String material
    ) {
        this(
            id,
            displayName,
            name,
            hardness,
            resistance,
            minStateId,
            maxStateId,
            defaultState,
            diggable,
            emitLight,
            material,
            new int[0]
        );
    }
}